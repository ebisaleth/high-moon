import HighMoonScene from './highMoonScene'

export default class SCENENAME extends HighMoonScene {

  sky: Phaser.GameObjects.TileSprite
  creature: Phaser.GameObjects.Sprite
  sign: Phaser.GameObjects.Image

  gong: any //sorry TS

  constructor() {
    super('SCENENAME')
  }


  preload() {

    this.load.text('start-text', 'assets/json/intro-port-nem')

    this.load.image('space-bus-bg', 'assets/img/space_bus_bg.png')

    this.load.spritesheet('space-bus-creature', 'assets/img/space_bus_creature_frames.png', {
      frameWidth: 256,
      frameHeight: 304
    })

    this.load.audio('gong', 'assets/sound/PSA.mp3')

  }

  create() {
    super.create()

    /*
      <<<<<<<<<<<<<<<<<<<  CAMERA AND TEXTBOX SETUP  >>>>>>>>>>>>>>>>>>>>>
   */

    this.cameras.main.fadeFrom(3000)

    this.textBox.setJsonStringAsPassages(this.cache.text.get('SCENENAME-start-text-or-something'))

    this.time.delayedCall(3000, this.textBox.open, [], this.textBox)

    /*
      <<<<<<<<<<<<<<<<<<<   GRAPHICS SETUP  >>>>>>>>>>>>>>>>>>>>>
    */

    /* EXAMPLE FOR A TILE SPRITE */

    this.sky = this.add.tileSprite(0, 0, 2228, 660, 'space-bus-sky').setOrigin(0, 0)
    this.add.image(0, 0, 'space-bus-bg').setOrigin(0, 0)

    /* EXAMPLE FOR AN IMAGE */

    this.sign = this.add.image(0, 0, 'space-bus-sign')
      .setOrigin(0, 0)
      .setInteractive({ pixelPerfect: true, cursor: 'url(assets/img/cursorgreen.png), pointer' })

    this.sign.on('pointerdown', () => {
      if (!this.textBox.isOpen) {
        this.textBox.setStringArrayAsPassage([
          '\"Due to recent happenings, we ask all our passengers to please refrain from leaving any mucus on the upholstery.\"',
          '\"In case of an acute phlegmergency, please make use of the plastic sheets that can be found under your seat.\"',
          '\"Your SPACE BUS Team\"'])
        this.textBox.open()
      }
    })

    /* EXAMPLE FOR AN ANIMATED SPRITE */

    this.creature = this.add.sprite(826, 508, 'space-bus-creature')
      .setInteractive({ pixelPerfect: true, cursor: 'url(assets/img/cursorgreen.png), pointer' })

    this.creature.on('pointerdown', () => {
      if (!this.textBox.isOpen) {
        this.textBox.setStringArrayAsPassage([
          'They were already on the bus when I got here.',
          'And they don\'t seem very concerned with packing up now, either.'])
        this.textBox.open()
      }
    })

    /* ANIMATE GRAPHICS */

    this.moveStars()

    this.anims.create({
      key: 'creature-blink',
      frames: this.anims.generateFrameNumbers('space-bus-creature', { frames: [0, 1, 2, 1, 0] }),
      frameRate: 30
    })

    this.anims.create({
      key: 'creature-foot',
      frames: this.anims.generateFrameNumbers('space-bus-creature', { frames: [0, 3, 4, 3, 0, 3, 4, 3, 0] }),
      frameRate: 10
    })


    this.time.delayedCall(Math.random() * 5000, this.animateCreature, [], this)


    /*
      <<<<<<<<<<<<<<<<<<<   SOUND SETUP  >>>>>>>>>>>>>>>>>>>>>
    */


    this.gong = this.sound.add('gong')
    this.gong.volume = 0.3

    /*
    <<<<<<<<<<<<<<<<<<<   INVENTORY SETUP  >>>>>>>>>>>>>>>>>>>>>
  */

    let items: Item[] = [{
      name: 'Example Item',
      description: 'An Item that\'s an example.',
      smallImageKey: 'example-texture',
      largeImageKey: 'example-texture-large'
    }]

    this.inventory.setContent(items)

  }

  /*
  <<<<<<<<<<<<<<<<<<<   DRAG SETUP  >>>>>>>>>>>>>>>>>>>>>
*/

  dropReact(draggedObject: Phaser.GameObjects.GameObject, dropZoneName: Phaser.GameObjects.Zone): void {

    if (!this.textBox.progressing) {
      this.inventory.close()

      let text: string[] = []

      switch (draggedObject.name) {
        case 'Space Bus Ticket + Leaflet' :
          text = ['That\'s my ticket for the space bus. It has already been validated.',
            'The complementary leaflet they gave me when I booked it marvels the benefits of traveling with semi-public space transit.',
            'I had nine hours to kill and I still couldn\'t get myself to read it.']
          break
        case 'Shuttle Ticket' :
          text = ['I need to change into a shuttle taxi at Nem Station.',
            'I tried to find another space bus connection, but apparently, the space bus stop on High Moon closed down a few years ago.',
            'I also had to book this taxi in advance and the shuttle agency charged me extra, because  ~no  one~  wants to go to that backwater place.',
            'Not even shuttle drivers.']
          break
        case 'Breathing Helmet' :
          text = ['Great. Let\'s put this on and get off this weird bus. My back hurts like heck.']
          this.time.delayedCall(2500, this.gong.play, [], this.gong)
          this.time.delayedCall(10000, this.scene.start, ['NEXT'], this.scene)
          this.time.delayedCall(5000, this.cameras.main.fade, [3000], this.cameras.main)
          break
      }
      this.textBox.close()
      this.textBox.setStringArrayAsPassage(text)
      this.textBox.open()
    }

  }


  /*
  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  <<<<<<<<<<<<<<<<<<<  PUBLIC FUNCTIONS >>>>>>>>>>>>>>>>>>>>>
  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 */

  /*
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   <<<<<<<<<<<<<<<<<<<  NON-PUBLIC FUNCTIONS >>>>>>>>>>>>>>>>>>>>>
   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  */


  animateCreature() {
    this.creature.play(Math.round(Math.random()) ? 'creature-blink' : 'creature-foot')
    this.time.delayedCall(Math.random() * 10000, this.animateCreature, [], this)
  }

  moveStars() {
    this.add.tween({
      targets: this.sky,
      tilePositionX: this.sky.tilePositionX + 100,
      duration: 10000,
      ease: 'Linear',
      yoyo: false,
      repeat: 0
    })
    this.time.delayedCall(10000, this.moveStars, [], this)
  }

  /*
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 <<<<<<<<<<<<<<<<<<<  UPDATE >>>>>>>>>>>>>>>>>>>>>
 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*/

  update() {
    super.update()

  }


}